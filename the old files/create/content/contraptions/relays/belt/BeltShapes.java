package com.simibubi.kinetic_api.content.contraptions.relays.belt;

import static net.minecraft.block.BeetrootsBlock.a;

import java.util.HashMap;
import java.util.Map;
import net.minecraft.block.piston.PistonHandler;
import net.minecraft.util.hit.EntityHitResult;
import net.minecraft.util.math.Direction;
import net.minecraft.util.math.Direction.Axis;
import net.minecraft.util.shape.VoxelShapes;
import com.simibubi.kinetic_api.AllShapes;
import com.simibubi.kinetic_api.foundation.utility.VoxelShaper;
import dco;
import ddb;

public class BeltShapes {

	/*
	 * | hi. i made these comments mostly to help me with creating the shapes. but they should also be able to help you understand what i'm doing here if that's why you came here. cheers
	 * |
	 * |                 belt shape slope south descending
	 * |                    generated by makeSlopePart
	 * |         z
	 * |  y        15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0   |               |                                                    |                                                           |
	 * |            |                                            |   |               |                                                    |                                                           |
	 * | +5         |                                            #   |               |            belt shape flat south ending            |            belt shape flat south full                     |
	 * | +4         |                                         #  #   |               |             generated by makeFlatEnding            |             generated by makeFlatFull                     |
	 * | +3         |                                      #  #  #   | z             |z                                                   |z                                                          |
	 * | +2         |                                   #  #  #  #   |  15  14 ...   |  15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0   |  15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0          |
	 * | +1         |                                #  #  #  #  #   |   |           |   |                                            |   |   |                                            |          |
	 * | 15   ------+  -  -  -  -  -  -  -  -  -  #  #  #  #  #  #-- | --+---------- | --+  -  -  -  -  -  -  -  -  -  -  -  -  -  -  +-- | --+  -  -  -  -  -  -  -  -  -  -  -  -  -  -  +---       |
	 * | 14         |                          #  #  #  #  #  #  #   |   |           |   |                                            |   |   |                                            |          |
	 * | 13         |                       #  #  #  #  #  #  #  #   |   |           |   |                                            |   |   |                                            |          |
	 * | 12         |                    #  #  #  #  #  #  #  #  #   |   |           |   |  #  #  #  #  #  #  #  #  #  #  #  #  #  #  |   |   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #          |
	 * | 11         |                 #  #  #  #  #  #  #  #  #  #   |   |           |   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #   |   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #          |
	 * | 10         |              #  #  #  #  #  #  #  #  #  #  #   |   #           |   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #   |   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #          |
	 * | 9          |           #  #  #  #  #  #  #  #  #  #  #  |   |   #           |   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #   |   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #          |
	 * | 8          |        #  #  #  #  #  #  #  #  #  #  #     |   |   #           |   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #   |   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #          |
	 * | 7          |     #  #  #  #  #  #  #  #  #  #  #        |   |   #           |   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #   |   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #          |
	 * | 6          |  #  #  #  #  #  #  #  #  #  #  #           |   |   #           |   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #   |   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #          |
	 * | 5          #  #  #  #  #  #  #  #  #  #  #              |   |   #           |   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #   |   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #          |
	 * | 4          #  #  #  #  #  #  #  #  #  #                 |   |   #           |   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #   |   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #          |
	 * | 3          #  #  #  #  #  #  #  #  #                    |   |   #           |   |  #  #  #  #  #  #  #  #  #  #  #  #  #  #  |   |   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #          |
	 * | 2          #  #  #  #  #  #  #  #                       |   |   #           |   |                                            |   |   |                                            |          |
	 * | 1          #  #  #  #  #  #  #                          |   |   #           |   |                                            |   |   |                                            |          |
	 * | 0   -------#  #  #  #  #  #  -  -  -  -  -  -  -  -  -  +-- | --#---------- | --+  -  -  -  -  -  -  -  -  -  -  -  -  -  -  +-- | --+  -  -  -  -  -  -  -  -  -  -  -  -  -  -  +---       |
	 * |-1          #  #  #  #  #                                |   |   |           |   |                                            |   |   |                                            |          |
	 * |-2          #  #  #  #                                   |   |   |           |   |                                            |   |   |                                            |          |
	 * |-3          #  #  #                                          |  slice used   |                                                    |                                                           |
	 * |-4          #  #                                             |  to kinetic_api    |                                                    |                                                           |
	 * |-5          #                                                |  the stairs   |                                                    |                                                           |
	 * |                                  x 1 to 14                  |               |                                                    |                                                           |
	 */

	/*
	 * |Belt shapes always consist of 2 halves depending on state. This class generated all shapes for belts facing SOUTH and then uses VoxelShapers to fill the remaining 3 Directions
	 * |Middle shapes use the same building part in both halved and don't need to be composed
	 * |some of these shapes could be skipped and easily achieved by rotating other shapes but i left them in for clarity's sake
	 * | Flat Belts:                                    Sloped Belts: (DESC)                           (ASC)
	 * |                south half    north half                         south half    north half         south half    north half
	 * |
	 * |      Middle     flat full     flat full               Middle    slope desc    slope desc          slope asc     slope asc
	 * |         End      flat end     flat full                  End     flat end     slope desc           flat end     slope asc
	 * |       Start     flat full      flat end                Start    slope desc     flat end           slope asc      flat end
	 */

	//Building parts for the shapes
	private static final VoxelShapes
			SLOPE_DESC_PART = makeSlopePart(false),
			SLOPE_ASC_PART = makeSlopePart(true),
			SIDEWAYS_FULL_PART = makeSidewaysFull(),
			SIDEWAYS_END_PART = makeSidewaysEnding(),
			FLAT_FULL_PART = makeFlatFull(),
			FLAT_END_PART = makeFlatEnding();

	private static final VoxelShapes SOUTH_MASK = a(0,-5,8,16,16+5,16);
	private static final VoxelShapes NORTH_MASK = a(0,-5,0,16,16+5,8);

	//Vertical Shapes
	private static final VoxelShaper
			VERTICAL_FULL = VerticalBeltShaper.make(FLAT_FULL_PART),
			VERTICAL_END = VerticalBeltShaper.make(compose(FLAT_END_PART, FLAT_FULL_PART)),
			VERTICAL_START = VerticalBeltShaper.make(compose(FLAT_FULL_PART, FLAT_END_PART));
	
	//Flat Shapes
	private static final VoxelShaper
			FLAT_FULL = VoxelShaper.forHorizontalAxis(FLAT_FULL_PART, Axis.Z),
			FLAT_END = VoxelShaper.forHorizontal(compose(FLAT_END_PART, FLAT_FULL_PART), Direction.SOUTH),
			FLAT_START = VoxelShaper.forHorizontal(compose(FLAT_FULL_PART, FLAT_END_PART), Direction.SOUTH);
	
	//Sideways Shapes
	private static final VoxelShaper
			SIDE_FULL = VoxelShaper.forHorizontalAxis(SIDEWAYS_FULL_PART, Axis.Z),
			SIDE_END = VoxelShaper.forHorizontal(compose(SIDEWAYS_END_PART, SIDEWAYS_FULL_PART), Direction.SOUTH),
			SIDE_START = VoxelShaper.forHorizontal(compose(SIDEWAYS_FULL_PART, SIDEWAYS_END_PART), Direction.SOUTH);
	
	//Sloped Shapes
	private static final VoxelShaper
			SLOPE_DESC = VoxelShaper.forHorizontal(SLOPE_DESC_PART, Direction.SOUTH),
			SLOPE_ASC = VoxelShaper.forHorizontal(SLOPE_ASC_PART, Direction.SOUTH),
			SLOPE_DESC_END = VoxelShaper.forHorizontal(compose(FLAT_END_PART, SLOPE_DESC_PART), Direction.SOUTH),
			SLOPE_DESC_START = VoxelShaper.forHorizontal(compose(SLOPE_DESC_PART, FLAT_END_PART), Direction.SOUTH),
			SLOPE_ASC_END = VoxelShaper.forHorizontal(compose(FLAT_END_PART, SLOPE_ASC_PART), Direction.SOUTH),
			SLOPE_ASC_START = VoxelShaper.forHorizontal(compose(SLOPE_ASC_PART, FLAT_END_PART), Direction.SOUTH);

	private static final VoxelShaper
			PARTIAL_CASING = VoxelShaper.forHorizontal(a(0, 0, 5, 16, 11, 16), Direction.SOUTH);

	static Map<PistonHandler, VoxelShapes> cache = new HashMap<>();
	static Map<PistonHandler, VoxelShapes> collisionCache = new HashMap<>();

	private static VoxelShapes compose(VoxelShapes southPart, VoxelShapes northPart){
		return ddb.a(
				ddb.b(SOUTH_MASK, southPart, dco.i),
				ddb.b(NORTH_MASK, northPart, dco.i)
		);
	}

	private static VoxelShapes makeSlopePart(boolean ascendingInstead) {
		VoxelShapes slice = a(1, 0, 16, 15, 11, 15);
		VoxelShapes result = ddb.a();

		for (int i = 0; i < 16; i++) {

			int yOffset = ascendingInstead ? 10 - i : i - 5;

			result = ddb.a(
					result,//move slice i voxels "right" and i-5 voxels "down"
					slice.a(0, yOffset / 16f, -i / 16f));
		}

		return result;
	}

	private static VoxelShapes makeFlatEnding(){
		return ddb.a(
			a(1,4,0,15,12,16),
			a(1,3,1,15,13,15)
		);
	}

	private static VoxelShapes makeFlatFull(){
		return a(1,3,0,15,13,16);
	}
	
	private static VoxelShapes makeSidewaysEnding(){
		return ddb.a(
			a(4,1,0,12,15,16),
			a(3,1,1,13,15,15)
		);
	}
	
	private static VoxelShapes makeSidewaysFull(){
		return a(3,1,0,13,15,16);
	}

	public static VoxelShapes getShape(PistonHandler state) {
		if (cache.containsKey(state))
			return cache.get(state);
		VoxelShapes createdShape = ddb.a(getBeltShape(state), getCasingShape(state));
		cache.put(state, createdShape);
		return createdShape;
	}
	
	public static VoxelShapes getCollisionShape(PistonHandler state) {
		if (collisionCache.containsKey(state))
			return collisionCache.get(state);
		VoxelShapes createdShape = ddb.b(AllShapes.BELT_COLLISION_MASK, getShape(state), dco.i);
		collisionCache.put(state, createdShape);
		return createdShape;
	}

	private static VoxelShapes getBeltShape(PistonHandler state) {
		Direction facing = state.c(BeltBlock.HORIZONTAL_FACING);
		Axis axis = facing.getAxis();
		BeltPart part = state.c(BeltBlock.PART);
		BeltSlope slope = state.c(BeltBlock.SLOPE);

		//vertical
		if (slope == BeltSlope.VERTICAL) {
			if (part == BeltPart.MIDDLE || part == BeltPart.PULLEY)
				return VERTICAL_FULL.get(axis);
			//vertical ending
			return (part == BeltPart.START ? VERTICAL_START : VERTICAL_END).get(facing);
		}

		//flat part
		if (slope == BeltSlope.HORIZONTAL) {
			if (part == BeltPart.MIDDLE || part == BeltPart.PULLEY)
				return FLAT_FULL.get(axis);
			//flat ending
			return (part == BeltPart.START ? FLAT_START : FLAT_END).get(facing);
		}
		
		//sideways part
		if (slope == BeltSlope.SIDEWAYS) {
			if (part == BeltPart.MIDDLE || part == BeltPart.PULLEY)
				return SIDE_FULL.get(axis);
			//flat ending
			return (part == BeltPart.START ? SIDE_START : SIDE_END).get(facing);
		}

		//slope
		if (part == BeltPart.MIDDLE || part == BeltPart.PULLEY)
			return (slope == BeltSlope.DOWNWARD ? SLOPE_DESC : SLOPE_ASC).get(facing);
		//sloped ending
		if (part == BeltPart.START)
			return (slope == BeltSlope.DOWNWARD ? SLOPE_DESC_START : SLOPE_ASC_START).get(facing);
		if (part == BeltPart.END)
			return (slope == BeltSlope.DOWNWARD ? SLOPE_DESC_END : SLOPE_ASC_END).get(facing);

		//bad state
		return ddb.a();
	}

	private static VoxelShapes getCasingShape(PistonHandler state) {
		if (!state.c(BeltBlock.CASING))
			return ddb.a();

		Direction facing = state.c(BeltBlock.HORIZONTAL_FACING);
		BeltPart part = state.c(BeltBlock.PART);
		BeltSlope slope = state.c(BeltBlock.SLOPE);

		if (slope == BeltSlope.VERTICAL)
			return ddb.a();
		if (slope == BeltSlope.SIDEWAYS)
			return ddb.a();

		if (slope == BeltSlope.HORIZONTAL) {
			return AllShapes.CASING_11PX.get(Direction.UP);
		}

		if (part == BeltPart.MIDDLE || part == BeltPart.PULLEY)
			return PARTIAL_CASING.get(slope == BeltSlope.UPWARD ? facing : facing.getOpposite());

		if (part == BeltPart.START)
			return slope == BeltSlope.UPWARD ? AllShapes.CASING_11PX.get(Direction.UP) : PARTIAL_CASING.get(facing.getOpposite());
		if (part == BeltPart.END)
			return slope == BeltSlope.DOWNWARD ? AllShapes.CASING_11PX.get(Direction.UP) : PARTIAL_CASING.get(facing);

		//something went wrong
		return ddb.b();
	}

	private static class VerticalBeltShaper extends VoxelShaper {

		public static VoxelShaper make(VoxelShapes southBeltShape){
			return forDirectionsWithRotation(
					rotatedCopy(southBeltShape, new EntityHitResult(-90,0,0)),
					Direction.SOUTH,
					Direction.Type.HORIZONTAL,//idk, this can probably be improved :S
					direction -> new EntityHitResult(
							direction.getDirection() == Direction.AxisDirection.POSITIVE ? 0 : 180,
							-direction.asRotation(),
							0));
		}
	}

}
